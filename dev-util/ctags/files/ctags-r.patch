diff -Naur ctags-5.8.orig/parsers.h ctags-5.8/parsers.h
--- ctags-5.8.orig/parsers.h	2012-02-14 11:25:31.000000000 +0100
+++ ctags-5.8/parsers.h	2012-02-23 16:05:57.000000000 +0100
@@ -44,6 +44,7 @@
 	PhpParser, \
 	PythonParser, \
 	RexxParser, \
+        RParser, \
 	RubyParser, \
 	SchemeParser, \
 	ShParser, \
diff -Naur ctags-5.8.orig/r.c ctags-5.8/r.c
--- ctags-5.8.orig/r.c	1970-01-01 01:00:00.000000000 +0100
+++ ctags-5.8/r.c	2012-02-23 21:08:26.000000000 +0100
@@ -0,0 +1,50 @@
+/*
+*   $Id: r.c 720 2009-07-07 03:55:23Z dhiebert $
+*
+*   Copyright (c) 2000-2003, Francesco Favero
+*
+*   This source code is released for free distribution under the terms of the
+*   GNU General Public License.
+*
+*   This module contains functions for generating tags for R language
+*   files.
+*
+*   INCLUDE FILES
+*/
+
+#include "general.h"  /* must always come first */
+#include <string.h>
+#include "parse.h"
+
+/* FUNCTION DEFINITIONS */
+
+static void installRRegex (const langType language)
+{
+    /* xyz <- (or =) function(){ */
+    addTagRegex (language,"([a-zA-Z0-9_]+)[ \t]*(<-|=)[ \t]*function","\\1","f,function,functions",NULL);
+    /* xyz <- (or =) variable */
+    addTagRegex (language,"(^[a-zA-Z0-9_]+)[ \t]*(<-|=)","\\1","v,variable,variables",NULL);
+    /* library(xyz) or require(xyz) */
+    addTagRegex (language,"(^|[ \t])(library|require)\\(([a-zA-Z0-9_]+)\\)","\\3","l,library,libraries",NULL);
+    /* setClass(Class="xyz") */
+    addTagRegex (language,"setClass\\((Class=\"|\")([a-zA-Z0-9_]+)\"","\\1","c,s4class,s4classes",NULL);
+    /* new("xyz",) */
+    addTagRegex (language,"new\\(\"([a-zA-Z0-9_]+)\"","\\1","c,s4class,s4classes",NULL);
+/*
+
+--regex-R=/([[:alnum:]]+)[[:space:]]*<-/\1/v,variable/
+--regex-R=/[^[:alnum:]]plot[[:space:]]*\(([[:alnum:],=" ]+)\)/\1/p,plot/
+--regex-R=/([[:alpha:]]apply[[:space:]]*\([[:alnum:],=" ]+\))/\1/a,apply/i*/
+}
+
+/* Create parser definition stucture */
+extern parserDefinition* RParser (void)
+{
+    static const char *const extensions [] = { "R", "r", NULL };
+/*    parserDefinition* def = parserNew ("R");*/
+    parserDefinition* const def = parserNew ("R");
+    def->extensions = extensions;
+    def->initialize = installRRegex;
+    def->regex      = TRUE;
+    return def;
+}
diff -Naur ctags-5.8.orig/r3.c ctags-5.8/r3.c
--- ctags-5.8.orig/r3.c	1970-01-01 01:00:00.000000000 +0100
+++ ctags-5.8/r3.c	2012-02-24 09:37:00.000000000 +0100
@@ -0,0 +1,100 @@
+/*
+*   $Id: r.c 720 2009-07-07 03:55:23Z dhiebert $
+*
+*   Copyright (c) 2000-2003, Francesco Favero
+*
+*   This source code is released for free distribution under the terms of the
+*   GNU General Public License.
+*
+*   This module contains functions for generating tags for R language
+*   files.
+*
+*   INCLUDE FILES
+*/
+
+#include "general.h"  /* must always come first */
+#include <string.h>
+#include "parse.h"
+
+/* DATA DEFINITIONS */
+typedef enum eRKinds {
+    K_FUNCTION, K_VARIABLE, K_LIBRARY, K_CLASS
+} RKind;
+
+static kindOption RKinds [] = {
+    { TRUE, 'f', "function", "functions" },
+    { TRUE, 'v', "variable", "variables" },
+    { TRUE, 'l', "library", "libraries" },
+    { TRUE, 'c', "s4class", "s4classes" }
+};
+
+
+/* FUNCTION DEFINITIONS */
+
+static void functionDef (const char *const line, const regexMatch *const matches,
+                       const unsigned int count)
+{
+    if (count > 1)    /* should always be true per regex */
+    {
+        vString *const name = vStringNew ();
+        vStringNCopyS (name, line + matches [1].start, matches [1].length);
+        makeSimpleTag (name, RKinds, K_FUNCTION);
+    }
+}
+
+static void findRTags (void)
+{
+    while (fileReadLine () != NULL)
+        ;  /* don't need to do anything here since callback is sufficient */
+}
+
+static void installRRegex (const langType language)
+{
+/*    addCallbackRegex (language, "^def[ \t]+([a-zA-Z0-9_]+)", NULL, definition);*/
+    addCallbackRegex (language,"([a-zA-Z0-9_]+)[ \t]*(<-|=)[ \t]*function",NULL,"function",NULL);
+}
+
+
+/*static void installRRegex (const langType language)*/
+/*{*/
+    /* xyz <- (or =) function(){ */
+/*    addTagRegex (language,"([a-zA-Z0-9_]+)[ \t]*(<-|=)[ \t]*function","\\1","f,function,functions",NULL);*/
+    /* xyz <- (or =) variable */
+/*    addTagRegex (language,"(^[a-zA-Z0-9_]+)[ \t]*(<-|=)","\\1","v,variable,variables",NULL);*/
+    /* library(xyz) or require(xyz) */
+/*    addTagRegex (language,"(^|[ \t])(library|require)\\(([a-zA-Z0-9_]+)\\)","\\3","l,library,libraries",NULL);*/
+    /* setClass(Class="xyz") */
+/*    addTagRegex (language,"setClass\\((Class=\"|\")([a-zA-Z0-9_]+)\"","\\1","c,s4class,s4classes",NULL);*/
+    /* new("xyz",) */
+/*    addTagRegex (language,"new\\(\"([a-zA-Z0-9_]+)\"","\\1","c,s4class,s4classes",NULL);*/
+/*
+
+--regex-R=/([[:alnum:]]+)[[:space:]]*<-/\1/v,variable/
+--regex-R=/[^[:alnum:]]plot[[:space:]]*\(([[:alnum:],=" ]+)\)/\1/p,plot/
+--regex-R=/([[:alpha:]]apply[[:space:]]*\([[:alnum:],=" ]+\))/\1/a,apply/i*/
+/*}*/
+
+/* Create parser definition stucture */
+/*extern parserDefinition* RParser (void)*/
+/*{*/
+/*    static const char *const extensions [] = { "R", "r", NULL };*/
+/*    parserDefinition* def = parserNew ("R");*/
+/*    parserDefinition* const def = parserNew ("R");*/
+/*    def->extensions = extensions;*/
+/*    def->initialize = installRRegex;*/
+/*    def->regex      = TRUE;*/
+/*    return def;*/
+/*}*/
+
+
+extern parserDefinition* RParser (void)
+{
+        static const char *const extensions [] = { "R", "r", NULL };
+        parserDefinition* const def = parserNew ("R");
+        def->initialize = installRRegex;
+        def->kinds      = RKinds;
+        def->kindCount  = KIND_COUNT (RKinds);
+        def->extensions = extensions;
+        def->parser     = findRTags;
+        return def;
+}
diff -Naur ctags-5.8.orig/source.mak ctags-5.8/source.mak
--- ctags-5.8.orig/source.mak	2012-02-14 11:25:31.000000000 +0100
+++ ctags-5.8/source.mak	2012-02-23 15:39:23.000000000 +0100
@@ -40,6 +40,7 @@
 	perl.c \
 	php.c \
 	python.c \
+        r.c \
 	read.c \
 	rexx.c \
 	routines.c \
@@ -102,6 +103,7 @@
 	perl.$(OBJEXT) \
 	php.$(OBJEXT) \
 	python.$(OBJEXT) \
+        r.$(OBJEXT) \
 	read.$(OBJEXT) \
 	rexx.$(OBJEXT) \
 	routines.$(OBJEXT) \
